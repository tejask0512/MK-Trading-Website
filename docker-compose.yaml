version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    container_name: mktrading_postgres
    environment:
      POSTGRES_DB: mktrading
      POSTGRES_USER: mktrading_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mktrading_secure_password_2024}
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres-logs:/var/log/postgresql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mktrading_user -d mktrading -h localhost -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - mktrading_network
    # Security and performance improvements
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: mktrading_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - mktrading_network
    security_opt:
      - no-new-privileges:true

  web:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: mktrading_web
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://mktrading_user:${DB_PASSWORD:-mktrading_secure_password_2024}@postgres:5432/mktrading
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mktrading
      - DB_USER=mktrading_user
      - DB_PASSWORD=${DB_PASSWORD:-mktrading_secure_password_2024}
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_password_2024}
      
      # Flask Configuration
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_APP=app.py
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Application Configuration
      - DEVELOPMENT_MODE=${DEVELOPMENT_MODE:-false}
      - DEBUG=${DEBUG:-false}
      
      # Payment Gateway
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID:-}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET:-}
      
      # Email Configuration (if using Flask-Mail)
      - MAIL_SERVER=${MAIL_SERVER:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USE_TLS=${MAIL_USE_TLS:-true}
      - MAIL_USERNAME=${MAIL_USERNAME:-}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-}
      
      # API Keys for financial data
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY:-}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
    ports:
      - "${WEB_PORT:-5000}:5000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./backups:/app/backups
      # Mount static files for development
      - ./static:/app/static:ro
      - ./templates:/app/templates:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health", "||", "curl", "-f", "http://localhost:5000/test_db"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - mktrading_network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: mktrading_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
      - ./static:/var/www/static:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - mktrading_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mktrading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16