Updated Requirement.txt

# Core ML/AI libraries
torch>=1.10.0
transformers>=4.15.0
datasets==2.11.0
evaluate>=0.3.0

# Data processing
pandas==1.5.3
numpy==1.24.2
scikit-learn==1.2.2
nltk==3.8.1
python-dateutil==2.8.2

# Web framework
flask==2.2.5
flask-cors==3.0.10
flask-wtf==1.1.1
flask-login==0.6.2
flask-bcrypt==1.0.1
flask-mail==0.9.1
flask-caching==2.0.2
werkzeug==2.3.8
gunicorn==20.1.0
python-dotenv==1.0.0

# Database
Flask-SQLAlchemy==3.0.5
SQLAlchemy==2.0.23
psycopg2-binary==2.9.9
alembic==1.13.1

# Web scraping
requests==2.31.0
beautifulsoup4==4.12.2
selenium==4.15.0

# Background tasks
schedule==1.2.0
redis==5.0.1
celery==5.3.4

# Payment gateway
razorpay==1.3.0

# Utilities
python-decouple==3.8
cryptography==41.0.7
PyJWT==2.8.0

-----------------------------------------------------------------------------------------------------------------------------

FIXED APP.PY KEY SECTION

import os
import sys
import logging
import time
from datetime import datetime, timedelta

# Configure logging first
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/app/logs/app.log') if os.path.exists('/app/logs') else logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

# Flask and extensions
from flask import Flask, render_template, jsonify, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps

# Other imports
import subprocess
import pandas as pd
import threading
import re
import razorpay
import uuid
from sqlalchemy import text, Column, Integer, String, Float, DateTime, Boolean, ForeignKey, Text
from sqlalchemy.exc import SQLAlchemyError

# Initialize Flask app
app = Flask(__name__, template_folder="templates", static_folder="static")

# Configuration
app.secret_key = os.getenv("SECRET_KEY", "dev-secret-key-change-in-production")

def get_database_url():
    """Get database URL with proper error handling"""
    database_url = os.environ.get("DATABASE_URL")
    
    if database_url:
        if database_url.startswith('postgres://'):
            database_url = database_url.replace('postgres://', 'postgresql://', 1)
        return database_url
    
    # Fallback for Docker
    db_host = os.getenv("DB_HOST", "postgres")  # Changed from "db" to "postgres"
    db_port = os.getenv("DB_PORT", "5432")
    db_name = os.getenv("DB_NAME", "mktrading")
    db_user = os.getenv("DB_USER", "mktrading_user")  # Match docker-compose
    db_password = os.getenv("DB_PASSWORD", "mktrading_secure_password_2024")
    
    return f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"

# Database configuration
app.config['SQLALCHEMY_DATABASE_URI'] = get_database_url()
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    'pool_pre_ping': True,
    'pool_recycle': 300,
    'pool_timeout': 20,
    'connect_args': {
        'connect_timeout': 10,
        'options': '-c timezone=UTC'
    }
}

# Initialize database
db = SQLAlchemy(app)

# Environment variables
DEVELOPMENT_MODE = os.getenv("DEVELOPMENT_MODE", "false").lower() == "true"
RAZORPAY_KEY_ID = os.getenv("RAZORPAY_KEY_ID", "")
RAZORPAY_KEY_SECRET = os.getenv("RAZORPAY_KEY_SECRET", "")

# Initialize Razorpay client only if keys are provided
razorpay_client = None
if RAZORPAY_KEY_ID and RAZORPAY_KEY_SECRET:
    razorpay_client = razorpay.Client(auth=(RAZORPAY_KEY_ID, RAZORPAY_KEY_SECRET))

# Database connection with retry logic
def wait_for_database(max_retries=30, delay=2):
    """Wait for database with exponential backoff"""
    for attempt in range(max_retries):
        try:
            with app.app_context():
                db.session.execute(text('SELECT 1'))
                db.session.commit()
            logger.info("Database connection successful")
            return True
        except Exception as e:
            logger.warning(f"DB connection attempt {attempt + 1}/{max_retries} failed: {e}")
            if attempt < max_retries - 1:
                time.sleep(min(delay * (2 ** attempt), 30))  # Exponential backoff, max 30s
            else:
                logger.error("All database connection attempts failed")
                raise e
    return False

def init_db():
    """Initialize database with proper error handling"""
    max_attempts = 3
    for attempt in range(max_attempts):
        try:
            wait_for_database()
            
            with app.app_context():
                db.create_all()
                logger.info("Database tables created successfully")
                
                # Initialize subscription plans if they don't exist
                if SubscriptionPlan.query.count() == 0:
                    plans = [
                        SubscriptionPlan(name="Basic", description="Access to news and dashboard only", 
                                       price=5000, duration_days=30, features="News Access, Dashboard Access"),
                        SubscriptionPlan(name="Premium Monthly", description="Complete access with priority support", 
                                       price=10000, duration_days=30, 
                                       features="News Access, Dashboard Access, BTC Livechart, Priority Support"),
                        SubscriptionPlan(name="Premium Quarterly", description="Complete access for 3 months", 
                                       price=27000, duration_days=90, 
                                       features="News Access, Dashboard Access, BTC Livechart, Priority Support"),
                        SubscriptionPlan(name="Premium Annual", description="Complete access for 12 months", 
                                       price=100000, duration_days=365, 
                                       features="News Access, Dashboard Access, BTC Livechart, Priority Support")
                    ]
                    
                    for plan in plans:
                        db.session.add(plan)
                    db.session.commit()
                    logger.info("Subscription plans initialized")
                
                return True
                
        except Exception as e:
            logger.error(f"Database initialization attempt {attempt + 1} failed: {e}")
            if attempt < max_attempts - 1:
                time.sleep(5)
            else:
                if DEVELOPMENT_MODE:
                    raise e
                else:
                    logger.warning("Database init failed, continuing in production mode")
                    return False
    return False

# Add this at the end before if __name__ == "__main__":
def create_app():
    """Application factory pattern"""
    try:
        init_db()
        logger.info("Application initialized successfully")
        return app
    except Exception as e:
        logger.error(f"Application initialization failed: {e}")
        if DEVELOPMENT_MODE:
            raise e
        return app

# For gunicorn
application = create_app()

if __name__ == "__main__":
    create_app()
    app.run(debug=DEVELOPMENT_MODE, host="0.0.0.0", port=5000)

-------------------------------------------------------------------------------------------------------------------------

FIXED DOCKERFILE

# Use Python 3.9 slim image
FROM python:3.9-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV FLASK_APP=app.py
ENV FLASK_ENV=production
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    postgresql-client \
    libpq-dev \
    curl \
    wget \
    git \
    python3-dev \
    libblas-dev \
    liblapack-dev \
    gfortran \
    pkg-config \
    libhdf5-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Download NLTK data
RUN python -c "import nltk; \
    nltk.download('punkt', quiet=True); \
    nltk.download('vader_lexicon', quiet=True); \
    nltk.download('stopwords', quiet=True); \
    nltk.download('wordnet', quiet=True)" || true

# Create directories with proper permissions
RUN mkdir -p /app/logs /app/data /app/models /app/static /app/templates /app/backups && \
    chmod 755 /app/logs /app/data /app/models /app/backups

# Copy application code
COPY . .

# Create non-root user and set permissions
RUN groupadd -r mktrading && \
    useradd -r -g mktrading -d /app -s /bin/bash mktrading && \
    chown -R mktrading:mktrading /app && \
    chmod +x /app

# Switch to non-root user
USER mktrading

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Start application
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "--timeout", "120", "--worker-class", "sync", "--max-requests", "1000", "--max-requests-jitter", "100", "app:application"]



-----------------------------------------------------------------------------------------------------------------

FIXED DOCKER COMPOSE

version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    container_name: mktrading_postgres
    environment:
      POSTGRES_DB: mktrading
      POSTGRES_USER: mktrading_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mktrading_secure_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mktrading_user -d mktrading"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mktrading_network

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: mktrading_web
    environment:
      - DATABASE_URL=postgresql://mktrading_user:${DB_PASSWORD:-mktrading_secure_password_2024}@postgres:5432/mktrading
      - DB_HOST=postgres
      - DB_USER=mktrading_user
      - DB_PASSWORD=${DB_PASSWORD:-mktrading_secure_password_2024}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this}
      - DEVELOPMENT_MODE=${DEVELOPMENT_MODE:-false}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID:-}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET:-}
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - mktrading_network

volumes:
  postgres_data:

networks:
  mktrading_network:
    driver: bridge


---------------------------------------------------------------------------------------------------------------------------

ENVIRONMENT FILE

# Database
DB_PASSWORD=mktrading_secure_password_2024
DB_HOST=postgres
DB_USER=mktrading_user
DB_NAME=mktrading

# Flask
SECRET_KEY=your-super-secret-key-change-this-in-production
DEVELOPMENT_MODE=false
FLASK_ENV=production

# Payment Gateway
RAZORPAY_KEY_ID=your_razorpay_key_id
RAZORPAY_KEY_SECRET=your_razorpay_key_secret

# Ports
WEB_PORT=5000
DB_PORT=5432


-------------------------------------------------------------------------------------------------------------------
error:
mktrading_web  | /usr/local/lib/python3.9/site-packages/gunicorn/util.py:25: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
mktrading_web  |   import pkg_resources
mktrading_web  | [2025-06-11 06:52:52 +0000] [1] [INFO] Starting gunicorn 20.1.0
mktrading_web  | [2025-06-11 06:52:52 +0000] [1] [INFO] Listening at: http://0.0.0.0:5000 (1)
mktrading_web  | [2025-06-11 06:52:52 +0000] [1] [INFO] Using worker: sync
mktrading_web  | [2025-06-11 06:52:52 +0000] [7] [INFO] Booting worker with pid: 7
mktrading_web  | [2025-06-11 06:52:52 +0000] [8] [INFO] Booting worker with pid: 8
mktrading_web  | 'FLASK_ENV' is deprecated and will not be used in Flask 2.3. Use 'FLASK_DEBUG' instead.
mktrading_web  | 'FLASK_ENV' is deprecated and will not be used in Flask 2.3. Use 'FLASK_DEBUG' instead.
mktrading_web  | [2025-06-11 06:53:00 +0000] [7] [ERROR] Exception in worker process
mktrading_web  | Traceback (most recent call last):
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/arbiter.py", line 589, in spawn_worker
mktrading_web  |     worker.init_process()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/workers/base.py", line 134, in init_process
mktrading_web  |     self.load_wsgi()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/workers/base.py", line 146, in load_wsgi
mktrading_web  |     self.wsgi = self.app.wsgi()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/app/base.py", line 67, in wsgi
mktrading_web  |     self.callable = self.load()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/app/wsgiapp.py", line 58, in load
mktrading_web  |     return self.load_wsgiapp()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/app/wsgiapp.py", line 48, in load_wsgiapp
mktrading_web  |     return util.import_app(self.app_uri)
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/util.py", line 359, in import_app
mktrading_web  |     mod = importlib.import_module(module)
mktrading_web  |   File "/usr/local/lib/python3.9/importlib/__init__.py", line 127, in import_module
mktrading_web  |     return _bootstrap._gcd_import(name[level:], package, level)
mktrading_web  |   File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
mktrading_web  |   File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
mktrading_web  |   File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked
mktrading_web  |   File "<frozen importlib._bootstrap>", line 680, in _load_unlocked
mktrading_web  |   File "<frozen importlib._bootstrap_external>", line 850, in exec_module
mktrading_web  |   File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
mktrading_web  |   File "/app/app.py", line 84, in <module>
mktrading_web  |     db.init_app(app)
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/extension.py", line 253, in init_app
mktrading_web  |     raise RuntimeError(
mktrading_web  | RuntimeError: A 'SQLAlchemy' instance has already been registered on this Flask app. Import and use that instance instead.       
mktrading_web  | [2025-06-11 06:53:00 +0000] [7] [INFO] Worker exiting (pid: 7)
mktrading_web  | [2025-06-11 06:53:00 +0000] [8] [ERROR] Exception in worker process
mktrading_web  | Traceback (most recent call last):
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/arbiter.py", line 589, in spawn_worker
mktrading_web  |     worker.init_process()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/workers/base.py", line 134, in init_process
mktrading_web  |     self.load_wsgi()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/workers/base.py", line 146, in load_wsgi
mktrading_web  |     self.wsgi = self.app.wsgi()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/app/base.py", line 67, in wsgi
mktrading_web  |     self.callable = self.load()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/app/wsgiapp.py", line 58, in load
mktrading_web  |     return self.load_wsgiapp()
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/app/wsgiapp.py", line 48, in load_wsgiapp
mktrading_web  |     return util.import_app(self.app_uri)
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/gunicorn/util.py", line 359, in import_app
mktrading_web  |     mod = importlib.import_module(module)
mktrading_web  |   File "/usr/local/lib/python3.9/importlib/__init__.py", line 127, in import_module
mktrading_web  |     return _bootstrap._gcd_import(name[level:], package, level)
mktrading_web  |   File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
mktrading_web  |   File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
mktrading_web  |   File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked
mktrading_web  |   File "<frozen importlib._bootstrap>", line 680, in _load_unlocked
mktrading_web  |   File "<frozen importlib._bootstrap_external>", line 850, in exec_module
mktrading_web  |   File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
mktrading_web  |   File "/app/app.py", line 84, in <module>
mktrading_web  |     db.init_app(app)
mktrading_web  |   File "/usr/local/lib/python3.9/site-packages/flask_sqlalchemy/extension.py", line 253, in init_app
mktrading_web  |     raise RuntimeError(
mktrading_web  | RuntimeError: A 'SQLAlchemy' instance has already been registered on this Flask app. Import and use that instance instead.       
mktrading_web  | [2025-06-11 06:53:00 +0000] [8] [INFO] Worker exiting (pid: 8)

